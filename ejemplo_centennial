global _start

section .text

_start:   
    ; write(int fd, const void *buf, size_t count)    
    xor    eax,eax    
    xor    ebx,ebx    
    xor    ecx,ecx        
    xor    edx,edx    
    mov    al,0x4    
    inc    bl    
    push   0x000a2164    
    push   0x6c726f57    
    push   0x202c6f6c        
    push   0x6c6548    
    mov    ecx,esp    
    mov    dl,0xf    
    int    0x80
    
a. nasm -f elf32 -o code-one.o code-one.asm

b. ld -o code-one code-one.o

c. chmod +x code-one

d. ./code-one


for i in $(find / -executable -type f);do file -i $i | grep -i 'x-executable; charset=binary';done

a. readelf -S -W ~/examples/samplecode/info

b. readelf -p .text ~/examples/samplecode/info

c. readelf -x .text -W ~/examples/samplecode/info

------------


a. readelf -R .text -W ~/examples/samplecode/info

b. readelf -p .strtab -W ~/examples/samplecode/info

c. objdump -f ~/examples/samplecode/info

d. objdump -j .text -s ~/examples/samplecode/info

e. objdump -x ~/examples/samplecode/info

f. hexdump -C ~/examples/samplecode/info

---------------------   Exercise 8: ROP Fundamental Exploitation

int main() {
asm("\
needle0: jmp there\n\
here:    pop %rdi\n\
        xor %rax, %rax\n\
        movb $0x3b, %al\n\
        xor %rsi, %rsi\n\
        xor %rdx, %rdx\n\
        syscall\n\
there:   call here\n\
.string \"/bin/sh\"\n\
needle1: .octa 0xdeadbeef\n\
");
}

objdump -d ropshell | sed -n '/needle0/,/needle1/p'. 
